name: CMake CI Pipeline

on:
  push:
    branches:
      - main
    paths:
      - libs/**
      - projects/**/*
  pull_request:
    branches:
      - main
    paths:
      - libs/**
      - projects/**/*

env:
  ALL_PROJECTS: "base nfl" # Add new projects here as needed

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Check out the code
        uses: actions/checkout@v3

      # Step 2: Install dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake clang clang-tidy

      # Step 3: Detect changes and set targets
      - name: Detect changes
        id: detect-changes
        run: |
          # Detect which directories have been modified
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          echo "Changed files: $CHANGED_FILES"

          # Initialize the list of changed projects
          echo "" > changed_projects.txt

          # Check if any files in 'libs' were modified
          if echo "$CHANGED_FILES" | grep -q "^libs/"; then
            echo "libs modified, rebuilding all projects."
            echo "${{ env.ALL_PROJECTS }}" >> changed_projects.txt
          else
            # Check for changes in each project
            for project in ${{ env.ALL_PROJECTS }}; do
              if echo "$CHANGED_FILES" | grep -q "^projects/$project/"; then
                echo "$project" >> changed_projects.txt
              fi
            done
          fi

          # Export the affected projects
          if [ -s changed_projects.txt ]; then
            CHANGED_PROJECTS=$(cat changed_projects.txt | tr '\n' ' ')
            echo "Changed projects: $CHANGED_PROJECTS"
            echo "projects=$CHANGED_PROJECTS" >> $GITHUB_ENV
          else
            echo "No changes detected." && echo "projects=" >> $GITHUB_ENV
          fi

      # Step 4: Configure the CMake project
      - name: Configure CMake
        if: env.projects != ''
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      # Step 5: Build the changed projects
      - name: Build affected projects
        if: env.projects != ''
        run: |
          for project in ${{ env.projects }}; do
            echo "Building $project..."
            cmake --build build --target $project --config Release
          done

      # Step 6: Run static analysis with clang-tidy
      - name: Run clang-tidy analysis
        if: env.projects != ''
        run: |
          find libs/common projects \( -name "*.cpp" -o -name "*.h" \) -print0 | \
          xargs -0 clang-tidy -p build --quiet

      # Step 7: Run tests (if applicable)
      - name: Run tests
        if: env.projects != ''
        run: |
          ctest --test-dir build --output-on-failure
